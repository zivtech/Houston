<?php
/**
 * Zend library includes.
 */
require_once 'Zend/Db.php';
require_once 'Zend/Log.php';
require_once 'Zend/Log/Writer/Stream.php';
require_once 'Zend/Registry.php';

/**
 * Houston library includes.
 */
require_once 'Houston/DataObject.php';

// Load the application object into the Zend Registry.
// This must run before the menu system loads and hook_init.
Zend_Registry::set('Houston_Application', houston_get_data_object('Houston_Application'));

/**
 * Parse the Drupal $db_url into an array and return it.
 *
 * @return
 *   An array of database connection options compaible with 
 */
function houston_parse_drupal_db_dsn() {

  global $databases;
  static $url = array();

  if (empty($url)) {
    $database = $databases['default']['default'];
    $url['username'] = $database['username'];
    $url['password'] = $database['password'];
    $url['dbname'] = $database['database'];
    $url['host'] = $database['host'];
    if (!empty($database['port'])) {
      $url['host'] = $database['host'] .':'. $database['port'];
    }
    $url['charset'] = 'utf8';
  }
  return $url;
}

/**
 * Return an object of type $class_name.
 * 
 * @param mixed $class_name 
 */
function houston_get_data_object($class_name) {

  static $db, $config;

  if ($db === NULL) {
    $db = Zend_db::factory('Mysqli', houston_parse_drupal_db_dsn());
    $db->setFetchMode(Zend_Db::FETCH_OBJ);
    Zend_Registry::set(variable_get('db_registry_key', 'drupal_db'), $db);
    $config = array(
      'db_registry_key' => variable_get('db_registry_key', 'drupal_db'),
    );
    /*
    // TODO: Decide whether to keep the log file around...
    if ($debug_log_file = variable_get('debug_log_file', '')) {
      $log = new Zend_Log();
      $log->addWriter(new Zend_Log_Writer_Stream($debug_log_file));
      Zend_Registry::set('debug_log', $log);
      $config['log_registry_key'] = 'debug_log';
    }
    */
  }
  return Houston_DataObject::factory($class_name, $config);
}

/**
 * Load an object from the templeton application.
 *
 * @param string $type
 * @param int $templeton_id 
 * @return object
 */
function houston_load_houston_object($id, $type) {
  if (is_numeric($id)) {
    $application = Zend_Registry::get('Houston_Application');
    // This is stored in a static array in the application class.
    $object = $application->getLoadedObject($id, $type);
  }
  else {
    $object = houston_get_data_object($type);
  }
  return $object;
}

/**
 * Load up a Houston object using a drupal id.
 *  Use houston_load_houston_object for loading with a houston id.
 * 
 * @param int $drupal_id 
 * @param string $type 
 * @param boolean $reload
 * @return object Houston_DataObject 
 */
function houston_load_houston_object_with_local_id($drupal_id, $type, $reload = FALSE) {
  static $objects = array();
  if (!isset($objects[$type][$drupal_id]) || $reload) {
    $objects[$type][$drupal_id] = houston_get_data_object($type);
    // Note: This controller name should be the local instance setup in houston.
    // There can only be one local instance, if there is one.
    $controller = variable_get('houston_local_drupal_controller', 'drupal');
    $objects[$type][$drupal_id]->loadWithExternalId($drupal_id, $controller);
  }
  return $objects[$type][$drupal_id];
}

/**
 * Delete a Houston object.
 * 
 * @param int $id 
 * @param string $type 
 * @param boolean $logical
 * TODO: return value
 * @return void
 */
function houston_delete_houston_object($id, $type, $logical = TRUE, $delete_children = FALSE) {
  $object = houston_load_houston_object($id, $type);
  $object->delete($logical, $delete_children);
}

/**
 * Delete up a Houston object using a drupal id.
 *  Use houston_delete_houston_object for loading with a houston id.
 *
 * @param int $id
 * @param string $type
 * @param boolean $logical
 * @return void
 */
function houston_delete_houston_object_with_local_id($drupal_id, $type, $logical = TRUE, $delete_children = FALSE) {
  $object = houston_load_houston_object_with_local_id($drupal_id, $type);
  if ($object->getId()) {
    $object->delete($logical, $delete_children);
  }
}

/**
 * Implements hook_menu().
 */
function houston_menu() {
  $items = array();
  $items['houston/services/salesforce'] = array(
    'title' => 'Salesforce Service',
    'page callback' => 'houston_service_url',
    'page arguments' => array(2),
    // TODO: Implement ip checking?
    'access callback' => 'houston_allowed_ips',
    'menu_name' => 'houston',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function houston_permission() {
  return array(
    'administer houston' => array(
      'title' => t('Administer Houston'),
      'description' => t('View and update houston data.'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function houston_cron() {
  if (variable_get('houston_run_cron', FALSE)) {
    $queue = houston_get_data_object('Houston_Queue');
    $queue->setNumberToProcess(variable_get('houston_cron_items_to_process', 10));
    $queue->cronProcessQueue();
  }
}

/**
 * Implements hook_theme().
 */
function houston_theme() {
  return array(
    'houston_display_object_data' => array(
      'variables' => array('object' => NULL),
    ),
  );
}

/**
 *  Page callback for houston services.
 *   Map to proper service handling based on
 *   controller type.
 */
function houston_service_url($controller) {
  watchdog('houston', t('Access of houston service url'));
  $app = Zend_Registry::get('Houston_Application'); 
  if ($type = $app->getControllerType($controller)) {
    switch ($type) {
      case 'Houston_Controllers_Salesforce_SalesForceClient':
        watchdog('houston', t('Using %controller on houston service rl.', array('%controller' => $controller)));
        houston_salesforce_service_url($controller);
        break;
    }
  }
  exit;
}

/**
 * Access callback for allwed salesfoce ips.
 */
function houston_allowed_ips() {
  $ip = $_SERVER['REMOTE_ADDR'];
  $ips = variable_get('houston_allowed_ips', FALSE);
  $allowed_ips = ($ips === FALSE) ? houston_default_allowed_ips() : explode("\n", $ips);
  $access = FALSE;
  if (in_array($ip, $allowed_ips, TRUE)) {
    $access = TRUE;
  } 
  else {
    foreach ($allowed_ips as $range) {
      if (_houston_cidr_match($ip, $range)) {
        $access = TRUE;
      }
    }
  }
  return $access;
}

/**
 * Given a CIDR mask and an IP address, return TRUE or FALSE if the IP address
 * matches or doesn't match the CIDR mask.
 * Adapted from http://stackoverflow.com/questions/594112
 */
function _houston_cidr_match($ip, $range) {
  list ($subnet, $bits) = explode('/', $range);
  $ip = ip2long($ip);
  $subnet = ip2long($subnet);
  // Sanity check: ip2long() returns FALSE for an invalid IP address.
  if (empty($subnet) || empty($bits) || empty($ip)) {
    return FALSE;
  }
  $mask = -1 << (32 - $bits);
  $subnet &= $mask; # nb: in case the supplied subnet wasn't correctly aligned
  return ($ip & $mask) == $subnet;
}

/**
 * Return an array of CIDR notation masks for allowed Salesforce IPs.
 * These are taken from Knowledge Article #102757.
 * https://help.salesforce.com/apex/HTViewSolution?id=102757&language=en
 */
function houston_default_allowed_ips() {
  return array('204.14.232.0/23', '204.14.237.0/24', '96.43.144.0/22', '96.43.148.0/22', '204.14.234.0/23', '204.14.238.0/23', '202.129.242.0/25');
}

function houston_fieldmap_settings_access($fieldmap_id, $perm) {
  $active = variable_get('houston_active_maps', array());
  if (!empty($active[$fieldmap_id])) {
    return user_access($perm);
  }
  return FALSE;
}

/**
 * Menu callback for service
 * TODO: authentication
 */
function houston_salesforce_service_url($controller) {
  // Needed for the reference to SObject in parse_message, otherwise it just seems to die
  // when it tries to call new SObject()
  require_once 'phptoolkit/soapclient/SforcePartnerClient.php';

  $content = file_get_contents('php://input');
  if (empty($content)) {
    // TODO: empty request.
    watchdog('houston', t('Empty houston service request.'));
    return;
  }
  $dom = new DOMDocument();
  $dom->loadXML($content);
  if (empty($dom) || !$dom->hasChildNodes()) {
    // TODO: Failed to parse message.
    watchdog('houston', t('Houston failed to parse message from %controller', array('%controller' => $controller)));
    _houston_soap_respond('false');
    return;
  }
  $resultArray = _houston_parse_salesforce_message($dom);
  $ret = _houston_handle_message($resultArray, $controller);

  // Sends SOAP response to SFDC
  $respond = $ret ? 'true' : 'false';
  _houston_soap_respond($respond);
  return;
}

/**
 * Loop through an array of SObjects from SalesForce and save them according to
 * any existing sf fieldmaps, notification settings, and data.
 *
 * @param array $objects
 *  A numerically indexed array of SObjects (as returned by
 *  _houston_parse_salesforce_message())
 * @return (boolean) FALSE if there were errors. TRUE otherwise.
 */
function _houston_handle_message($objects, $controller) {
  $app = Zend_Registry::get('Houston_Application'); 
  return $app->updateLocalObjects($objects, $controller);
}

/**
 * Parse SOAP message into its component args.
 *
 * @param (object) $domDoc
 *  A DOMDocument representation of the outbound SOAP message from SalesForce.
 * @return (array) $result
 *   An indexed array mapping sfids to SObject records from SalesForce.
 */
function _houston_parse_salesforce_message($domDoc) {
  $result = array();
  $sfids = array();
  // Create sObject array and fill fields provided in notification
  $objects = $domDoc->getElementsByTagName('sObject');
  foreach ($objects as $sObjectNode) {
    $sObjType = $sObjectNode->getAttribute('xsi:type');
    if (substr_count($sObjType, 'sf:')) {
      $sObjType = substr($sObjType, 3);
    }
    $obj = new SObject();
    $obj->type = $sObjType;
    $elements = $sObjectNode->getElementsByTagNameNS('urn:sobject.enterprise.soap.sforce.com','*');
    $obj->fieldnames = array();
    foreach ($elements as $node) {
      if ($node->localName == 'Id') {
        // "Id" is a property of the SObject as well as SObject->fields
        $sfids[] = $obj->Id = $node->textContent;
      }
      $fieldname = $node->localName;
      $obj->fields->$fieldname = $node->nodeValue;
      array_push($obj->fieldnames, $fieldname);
    }
    $result[$obj->Id] = $obj;
  }

  watchdog('houston', t('Houston parsed message <pre>%result</pre>', array('%result' => print_r($result, TRUE))));
  return $result;
}

/**
 * Format and send a SOAP response message.
 *
 * @param boolean $tf
 * @return void
**/
function _houston_soap_respond($response = 'true') {
  print '<?xml version = "1.0" encoding = "utf-8"?>
  <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <soapenv:Body>
        <notifications xmlns="http://soap.sforce.com/2005/09/outbound">
          <Ack>' . $response . '</Ack>
        </notifications>
      </soapenv:Body>
  </soapenv:Envelope>
  ';
}


/**
 * Page callback for displaying the data from a houston object.
 */
function theme_houston_display_object_data($variables) {
  $list = array();
  $object = $variables['object'];
  if (is_object($object)) {
    foreach ($object->getHumanReadableData() as $field) {
     $list[] = '<strong>' . $field['title'] . ':</strong> ' . $field['value'];
    }
    return theme('item_list', array('items' => $list));
  }
  return t('Invalid houston object id %id or type %type.', array('%id' => $object_id, '%type' => $object_type));
}

